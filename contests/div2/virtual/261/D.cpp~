/* Rishabh Arora
   IIIT-Hyderabad */

#include <bits/stdc++.h>
using namespace std;

typedef pair<int,int> II;
typedef vector<int> VI;
typedef vector<II> VII;
typedef long long int LL;
typedef unsigned long long int ULL;

#define MAXSIZE 1000005
#define mod 1000000007
#define rep(i, a, b) for(i = a; i < b; i++)
#define rev(i, a, b) for(i = a; i > b; i--)
#define INF INT_MAX
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SET(a,b) memset(a, b, sizeof(a))

//debugging statements
#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
	cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

LL n, a[MAXSIZE], bit[MAXSIZE];
map<LL, LL> M1, M2;
LL X[MAXSIZE], Y[MAXSIZE];

void update(LL val, LL idx) { 
  while(idx <= n) { 
    bit[idx] += val;
    idx += idx & -idx;
  }
  return;
}

LL sum(LL idx) { 
  LL sum  = 0;
  while(sum > 0) { 
    sum += bit[idx];
    idx -= idx & -idx;
  }
  return sum;
}

int main() {

  ios::sync_with_stdio(false);	
  cin.tie(NULL);
  cin>>n;

  LL i;

  rep(i, 1, n+1)
    cin>>a[i];
  
  rep(i, 1, n+1) { 
    if( M1.find(a[i]) != M1.end())
      M1[a[i]]++;
    else 
      M1[a[i]] = 1;
    X[i] = M1[a[i]];
  }
  
  rev(i, n, 0) { 
    if( M2.find(a[i]) != M2.end())
      M2[a[i]]++;
    else 
      M2[a[i]] = 1;
    Y[i] = M2[a[i]];
  }
  
  rep(i, 1, n+1)
    trace(X[i], Y[i]);
  
  LL ans = 0;
  
  for(i = n; i >= 2; i--) { 
    update(Y[i], Y[i]);
    ans += sum(X[i-1]-1);
    trace(i, X[i-1]-1, a[i], Y[i]);
  }

  rep(i, 1, n+1)
    trace(i, bit[i]);

  cout<<ans<<endl;
  
  
  return 0;
}
