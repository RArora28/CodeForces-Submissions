/* Rishabh Arora
   IIIT-Hyderabad */

#include <bits/stdc++.h>
using namespace std;

typedef pair<int,int> II;
typedef vector<int> VI;
typedef vector<II> VII;
typedef long long int LL;
typedef unsigned long long int ULL;

#define MAXSIZE 100005
#define mod 1000000007
#define rep(i, a, b) for(i = a; i < b; i++)
#define rev(i, a, b) for(i = a; i > b; i--)
#define INF INT_MAX
#define PB push_back
#define MP make_pair
#define fi first
#define se second
#define SET(a,b) memset(a, b, sizeof(a))

//debugging statements
#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
	cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

int w1[2010], b[2010], W, B;
bool taken[1010];
vector<VI> adj;
int x, y;
bool hulla[1010];
int t;
vector<pair<int, II> > temp;

void dfs(int x, int v) {
  taken[v] = true;
  t++;
  B += b[v];
  W += w1[v];
  temp[x].PB(MP(v, MP(b[v], w1[v])));
  
  for(auto it : adj[v])
    if(!taken[it])
      dfs(it);
  return;
}

LL dp( LL ind, LL We )
{
  if(ind == n+1)
    {
      if(We <= w)
	return 0;
      return INT_MIN;
    }
  else if(We > w)
    return INT_MIN;
  else if(D[ind][We] != -1)
    return D[ind][We];
  
}

int main() {

  ios::sync_with_stdio(false);	
  cin.tie(NULL);

  int n, m, w, j;
  int i;
  
  cin>>n>>m>>w;

  adj.resize(n+1);
  temp.resize(n+1);
  
  rep(i, 1, n+1)
    cin>>w1[i];
  
  rep(i, 1, n+1)
    cin>>b[i];
  
  rep(i, 1, m+1) {
    cin>>x>>y;
    adj[x].PB(y);
    adj[y].PB(x);
  }
  
  int cnt = 1;
  
  rep(i, 1, n+1) {
    if(!taken[i]) {
      t = 0;
      W = 0;
      B = 0;
      dfs(i, i);
      if(temp.size() != 1)
	temp.PB(MP(i, MP(B, W)));
    }
  }
  
  II p[2005];
  LL sum1[2005], val[2005], sum2[2005];
  
  memset(val, -1, sizeof(val));
  
  rep(i, 1, cnt+1) { 
    p[i].fi = WW[i];
    p[i].se = BB[i];
  }
  
  int k;
  
  sum1[0] = 1;
  sum2[0] = 1;
  val[0] = 0;
  
  for(auto it :  {
    
    rep(j, 0, w+1) 
      sum2[j] = sum1[j];
    
    rep(j, 0, w+1) {
      
      k = j + p[i].fi;    
      
      if(sum1[j] == 1 && k <= w) {
	sum2[k] = 1;
	val[k] = max(val[k], val[j] + p[i].se);
      }
    }
    
    rep(j, 0, w+1) 
      sum1[j] = sum2[j];
  }
  
  LL Max = -1;
  
  rep(i, 0, w+1)
    Max = max(Max, val[i]);
  
  cout<<Max<<endl;
   
  return 0;
}
