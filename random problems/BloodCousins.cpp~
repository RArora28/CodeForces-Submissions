/* Rishabh Arora
   IIIT-Hyderabad */

#include <bits/stdc++.h>
using namespace std;

typedef pair<int,int> II;
typedef vector<int> VI;
typedef vector<II> VII;
typedef long long int LL;
typedef unsigned long long int ULL;

#define MAXSIZE 100005
#define mod 1000000007
#define rep(i, a, b) for(i = a; i < b; i++)
#define rev(i, a, b) for(i = a; i > b; i--)
#define INF INT_MAX
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SET(a,b) memset(a, b, sizeof(a))

//debugging statements
#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
	cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

vector< VI > adj, level;
int t = 0, L[MAXSIZE], P[MAXSIZE], R[MAXSIZE], in[MAXSIZE], out[MAXSIZE];
bool taken[MAXSIZE];

void dfs(int v) { 
  taken[v] = true;  
  in[v] = t++;
  for(auto it : adj[v]) 
    if(!taken[it])
      L[it] = L[v] + 1;
  out[v] = t++;
  return;
}

int query(int v, int k) { 
  return (lower_bound(level[k].begin(), level[k].end(), out[v]) - upper_bound(level[k].begin(), level[k].end(), in[v])) + 1;
}

int main() {

  ios::sync_with_stdio(false);	
  cin.tie(NULL);

  int N, i;
  
  cin>>N;
  
  adj.resize(N+1);
  level.resize(N+1);
  
  rep(i, 1, N+1) {
    cin>>P[i];
    
    if(P[i] == 0)
      P[i] = i;
    else {
      adj[i].PB(P[i]);
      adj[P[i]].PB(i);
    }
  }
  
  dfs(1);

  rep(i,  1, N+1) {
    trace(i, L[i]);
    level[L[i]].PB(in[i]);
  }

  int m;
  int v, p;
  
  cin>>m;
  
  while(m--) { 
    cin>>v>>p;
    int k = L[v] + p;
    cout<<query(v, k)<<endl;
  }

  return 0;
}
